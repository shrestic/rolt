name: CD

on:
  push:
    branches:
      - deploy-aws
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    environment: rolt
    outputs:
      image_tag: ${{ steps.set-version.outputs.image_tag }}
      image_uri: ${{ steps.set-image-uri.outputs.image_uri }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Check VERSION file exists and read version
        id: set-version
        run: |
          if [ ! -f VERSION ]; then
            echo "VERSION file not found!"
            exit 1
          fi
          VERSION_CONTENT=$(cat VERSION)
          if [ -z "$VERSION_CONTENT" ]; then
            echo "VERSION file is empty!"
            exit 1
          fi
          echo "image_tag=$VERSION_CONTENT" >> $GITHUB_OUTPUT
          echo "Version read from VERSION file: $VERSION_CONTENT"

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push Docker image
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mainkode/rolt
          IMAGE_TAG: ${{ steps.set-version.outputs.image_tag }}
        uses: docker/build-push-action@v6
        with:
          context: .
          file: compose/production/django/Dockerfile
          push: true
          tags: ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
          cache-from: type=registry,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:cache
          cache-to: type=registry,mode=max,image-manifest=true,oci-mediatypes=true,ref=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:cache

      - name: Set image URI output
        id: set-image-uri
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: mainkode/rolt
          IMAGE_TAG: ${{ steps.set-version.outputs.image_tag }}
        run: |
          echo "image_uri=${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build
    runs-on: ubuntu-latest
    environment: rolt
    env:
      TF_VAR_rds_password: ${{ secrets.RDS_PASSWORD }}
      TF_VAR_django_secret_key: ${{ secrets.DJANGO_SECRET_KEY }}
      TF_VAR_admin_password: ${{ secrets.ADMIN_PASSWORD }}
      TF_VAR_sendgrid_api_key: ${{ secrets.SENDGRID_API_KEY }}
      TF_VAR_aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      TF_VAR_aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_VAR_google_oauth2_secret: ${{ secrets.GOOGLE_OAUTH2_SECRET }}
      TF_VAR_vnpay_hash_secret_key: ${{ secrets.VNPAY_HASH_SECRET_KEY }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-southeast-1

      - name: Install Terraform
        uses: hashicorp/setup-terraform@main
        with:
          terraform_version: latest

      - name: Terraform Init
        working-directory: ./terraform
        run: terraform init -backend-config=backend.hcl

      - name: Terraform Plan
        working-directory: ./terraform
        run: terraform plan -var="docker_image_url_django=${{ needs.build.outputs.image_uri }}" -out=tfplan

      - name: Terraform Apply
        working-directory: ./terraform
        run: terraform apply -auto-approve tfplan
